AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  test

  Sample SAM Template for test

Globals:
  Function:
    Timeout: 30
    Layers:
      - !Ref CodeLayer
      - !Ref LibLayer

Resources:

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: TestApi
      StageName: Staging
      Description: Used to expose lambdas to the world

  DynamoTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: DynamoTable
      AttributeDefinitions:
        - AttributeName: device_serial
          AttributeType: S
        - AttributeName: time_created
          AttributeType: N
      #        - AttributeName: BatteryState
      #          AttributeType: N
      KeySchema:
        - AttributeName: device_serial
          KeyType: HASH
        - AttributeName: time_created
          KeyType: RANGE
      #      LocalSecondaryIndexes:
      #        - IndexName: SerialNumber-BatteryState-Table
      #          KeySchema:
      #            - AttributeName: SerialNumber
      #              KeyType: HASH
      #            - AttributeName: BatteryState
      #              KeyType: RANGE
      #          Projection:
      #            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  AddFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AddDevice
      CodeUri: lambdas/add/
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda function that writes devices to DynamoDb
      Events:
        AddImageApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /add
            Method: POST
      Policies:
#        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
#        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetFunction
      CodeUri: lambdas/get/
      Handler: app.lambda_handler
      Runtime: python3.9
      Description: Lambda used for getting stuff
      Events:
        GetAllImagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /get/{device_serial}
            Method: GET
            RequestParameters:
              - method.request.querystring.latest:
                  Required: false
      Policies:
#        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
#        - AmazonDynamoDBFullAccess
#        - Statement:
#            - Effect: Allow
#              Action:
#                - dynamodb:GetItem
#                - dynamodb:BatchGetItem
#                - dynamodb:Query
#                - dynamodb:Scan
#                - dynamodb:BatchWriteItem
#                - dynamodb:PutItem
#                - dynamodb:UpdateItem
#              Resource: !GetAtt DynamoTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable

  CodeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/code_layer
      CompatibleRuntimes:
        - python3.9

  LibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/lib_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
